/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package loanassistant;

import java.awt.Color;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author divya
 */
public class Loanassistant extends javax.swing.JFrame {

    /**
     * Creates new form Loanassistant
     */
    
    public Loanassistant() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    Color lightYellow = new Color(255, 255, 128);
    boolean computePayment;
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        balanceLabel = new javax.swing.JLabel();
        balanceTextField = new javax.swing.JTextField();
        interestLabel = new javax.swing.JLabel();
        interestTextField = new javax.swing.JTextField();
        monthsLabel = new javax.swing.JLabel();
        paymentLabel = new javax.swing.JLabel();
        monthsTextField = new javax.swing.JTextField();
        paymentTextField = new javax.swing.JTextField();
        computeButton = new javax.swing.JButton();
        newLoanButton = new javax.swing.JButton();
        monthsButton = new javax.swing.JButton();
        paymentButton = new javax.swing.JButton();
        analysisLabel = new javax.swing.JLabel();
        analysisTextArea = new java.awt.TextArea();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LoanAssistant");
        setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(100, 25));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        balanceLabel.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        balanceLabel.setText("Loan Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        getContentPane().add(balanceLabel, gridBagConstraints);

        balanceTextField.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        balanceTextField.setToolTipText("");
        balanceTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        balanceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                balanceTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(balanceTextField, gridBagConstraints);

        interestLabel.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        interestLabel.setText("Interest Rate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        getContentPane().add(interestLabel, gridBagConstraints);

        interestTextField.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        interestTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        interestTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interestTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(interestTextField, gridBagConstraints);

        monthsLabel.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        monthsLabel.setText("No of Payments");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        getContentPane().add(monthsLabel, gridBagConstraints);

        paymentLabel.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        paymentLabel.setText("Monthly Payment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        getContentPane().add(paymentLabel, gridBagConstraints);

        monthsTextField.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        monthsTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        monthsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthsTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(monthsTextField, gridBagConstraints);

        paymentTextField.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        paymentTextField.setText("                                    ");
        paymentTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        paymentTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(paymentTextField, gridBagConstraints);

        computeButton.setText("Compute Monthly Payments");
        computeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(computeButton, gridBagConstraints);

        newLoanButton.setText("New Loan Analysis");
        newLoanButton.setEnabled(false);
        newLoanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newLoanButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        getContentPane().add(newLoanButton, gridBagConstraints);

        monthsButton.setText("X");
        monthsButton.setFocusable(false);
        monthsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(monthsButton, gridBagConstraints);

        paymentButton.setText("X");
        paymentButton.setFocusable(false);
        paymentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        getContentPane().add(paymentButton, gridBagConstraints);

        analysisLabel.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        analysisLabel.setText("Loan Analysis");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        getContentPane().add(analysisLabel, gridBagConstraints);

        analysisTextArea.setBackground(java.awt.Color.white);
        analysisTextArea.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        analysisTextArea.setPreferredSize(new java.awt.Dimension(250, 150));
        analysisTextArea.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        getContentPane().add(analysisTextArea, gridBagConstraints);

        exitButton.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        exitButton.setText("Exit");
        exitButton.setFocusable(false);
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        getContentPane().add(exitButton, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void balanceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_balanceTextFieldActionPerformed
    balanceTextField.transferFocus();    }//GEN-LAST:event_balanceTextFieldActionPerformed

    private void interestTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interestTextFieldActionPerformed
    interestTextField.transferFocus();
    }//GEN-LAST:event_interestTextFieldActionPerformed

    private void monthsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthsTextFieldActionPerformed
    monthsTextField.transferFocus();
    }//GEN-LAST:event_monthsTextFieldActionPerformed

    private void paymentTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentTextFieldActionPerformed
    balanceTextField.transferFocus();
    }//GEN-LAST:event_paymentTextFieldActionPerformed

    private void paymentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentButtonActionPerformed
    computePayment = true;
    paymentButton.setVisible(false);
    monthsButton.setVisible(true);
    monthsTextField.setEditable(true);
    monthsTextField.setBackground(Color.WHITE);
    paymentTextField.setText("");
    paymentTextField.setEditable(false);
    paymentTextField.setBackground(lightYellow);
    computeButton.setText("Compute Monthly Payment");
    }//GEN-LAST:event_paymentButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
    System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void monthsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthsButtonActionPerformed
    computePayment = false;
    paymentButton.setVisible(true);
    monthsButton.setVisible(false);
    monthsTextField.setText("");
    monthsTextField.setEditable(false);
    monthsTextField.setBackground(lightYellow);
    paymentTextField.setEditable(true);
    paymentTextField.setBackground(Color.WHITE);
    computeButton.setText("Compute Number of Payments");
    }//GEN-LAST:event_monthsButtonActionPerformed

    private void computeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeButtonActionPerformed
    double balance, interest, payment;
    int months;
    double monthlyInterest, multiplier;
    double loanBalance, finalPayment;
    if(validateDecimalNumber(balanceTextField))
    {
    balance =Double.parseDouble(balanceTextField.getText());
    }
    else{
        JOptionPane.showConfirmDialog(null, "Invalid or empty Loan Balance entry.\nPlease correct.", "Balance Input Error", JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE);
        return;
    }
    if(validateDecimalNumber(interestTextField)){
    interest =Double.parseDouble(interestTextField.getText());
    }
    else{
        JOptionPane.showConfirmDialog(null, "Invalid or empty Interest Rate entry.\nPlease correct.", " Interest Rate Input Error", JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE);
        return;
    }
    monthlyInterest = interest / 1200;
    if (computePayment)
    {
    // Compute loan payment
    if(validateDecimalNumber(monthsTextField))
    {
    months =Integer.parseInt(monthsTextField.getText());
    }
    else{
        JOptionPane.showConfirmDialog(null, "Invalid or empty No of payments entry.\nPlease correct.", "No of Payment Input Error", JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE);
        return;
    }
    if(interest == 0)
    {   
        payment = balance / months;
    }
    else
    {
    multiplier = Math.pow(1 + monthlyInterest, months);
    payment = balance * monthlyInterest * multiplier / (multiplier - 1);
    }
    paymentTextField.setText(new DecimalFormat("0.00").format(payment));
    }
    else
    {
    // Compute number of payments
    if(validateDecimalNumber(paymentTextField))
    {
    payment =Double.parseDouble(paymentTextField.getText());
    if (payment <= (balance * monthlyInterest + 1.0))
    {
        if (JOptionPane.showConfirmDialog(null, "Minimum payment must be $" +new DecimalFormat("0.00").format((int)(balance * monthlyInterest + 1.0)) + "\n" + "Do youwant to use the minimum payment?", "Input Error", JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION)
    {
        paymentTextField.setText(new DecimalFormat("0.00").format((int)(balance * monthlyInterest + 1.0)));
        payment =Double.parseDouble(paymentTextField.getText());
    }
        else{
            paymentTextField.requestFocus();
            return;
        }}
    }
    else{
        JOptionPane.showConfirmDialog(null, "Invalid or empty Monthly Payment entry.\nPlease correct.", "Monthly Payment Input Error", JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE);
        return;
    }
    if(interest == 0)
    {
        months = (int) (balance/payment);
    }
    else{
    months = (int)((Math.log(payment) - Math.log(payment - balance * monthlyInterest))/ Math.log(1 + monthlyInterest));
    }
    monthsTextField.setText(String.valueOf(months));
    }
    // reset payment prior to analysis to fix at two decimals
    payment = Double.parseDouble(paymentTextField.getText());
    // show analysis
    analysisTextArea.setText("Loan Balance: $" + new DecimalFormat("0.00").format(balance));
    analysisTextArea.append("\n" + "Interest Rate: " + new DecimalFormat("0.00").format(interest) + "%");
    // process all but last payment
    loanBalance = balance;
    for (int paymentNumber = 1; paymentNumber <= months - 1; paymentNumber++)
    {
    loanBalance += loanBalance * monthlyInterest - payment;
    }
    // find final payment
    finalPayment = loanBalance;
    if (finalPayment > payment)
    {// apply one more payment
    loanBalance += loanBalance * monthlyInterest - payment;
    finalPayment = loanBalance;
    months++;
    monthsTextField.setText(String.valueOf(months));
    }
    analysisTextArea.append("\n\n" + String.valueOf(months - 1) + " Payments of $" + new DecimalFormat("0.00").format(payment));
    analysisTextArea.append("\n" + "Final Payment of: $" + new DecimalFormat("0.00").format(finalPayment));
    analysisTextArea.append("\n" + "Total Payments: $" + new DecimalFormat("0.00").format((months - 1) * payment + finalPayment));
    analysisTextArea.append("\n" + "Interest Paid $" + new DecimalFormat("0.00").format((months - 1) * payment + finalPayment - balance));
    computeButton.setEnabled(false);
    newLoanButton.setEnabled(true);
    newLoanButton.requestFocus();

    }//GEN-LAST:event_computeButtonActionPerformed

    private void newLoanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newLoanButtonActionPerformed
    // clear computed value and analysis
    if (computePayment)
    {
        paymentTextField.setText("");
    }
    else
    {
        monthsTextField.setText("");
    }
    analysisTextArea.setText("");
    computeButton.setEnabled(true);
    newLoanButton.setEnabled(false);
    balanceTextField.requestFocus();
    }//GEN-LAST:event_newLoanButtonActionPerformed
    private boolean validateDecimalNumber(JTextField tf)
    {
    // checks to see if text field contains
    // valid decimal number with only digits and a single decimal point
    String s = tf.getText().trim();
    boolean hasDecimal = false;
    boolean valid = true;
    if (s.length() == 0)
    {
    valid = false;
    }
    else
    {
    for (int i = 0; i < s.length(); i++)
    {
    char c = s.charAt(i);
    if (c >= '0' && c <= '9')
    {
    continue;
    }
    else if (c == '.' && !hasDecimal)
    {
    hasDecimal = true;
    }
    else
    {
    // invalid character found
    valid = false;
    }
    }
    }
    tf.setText(s);
    if (!valid)
    {
    tf.requestFocus();
    }
    return (valid);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Loanassistant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Loanassistant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Loanassistant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Loanassistant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Loanassistant().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel analysisLabel;
    private java.awt.TextArea analysisTextArea;
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JTextField balanceTextField;
    private javax.swing.JButton computeButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel interestLabel;
    private javax.swing.JTextField interestTextField;
    private javax.swing.JButton monthsButton;
    private javax.swing.JLabel monthsLabel;
    private javax.swing.JTextField monthsTextField;
    private javax.swing.JButton newLoanButton;
    private javax.swing.JButton paymentButton;
    private javax.swing.JLabel paymentLabel;
    private javax.swing.JTextField paymentTextField;
    // End of variables declaration//GEN-END:variables
}
